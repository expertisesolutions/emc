/* http://imgarcade.com */
/* To emit signals to default.edj and print the result
   using edje_player in command line: 
   
    $ edje_player -p -S default.edj
   
   and type the signal to emit to the default.edj,like
   
      signal "string_signal_name" "source" 
   
   for example:
      signal "main.show.netx" "*"   
 */

collections {
 group {
    name: "main";
    script {
         public audio_state, // 0 == not show | 1 == show
                video_state,
                configure_state;

          public print_states() {
            new buf[32];                
                
                snprintf(buf, sizeof(buf), "audio_state = %d", get_int(audio_state));
                set_text(PART:"label", buf);  

                snprintf(buf, sizeof(buf), "video_state = %d", get_int(video_state));
                set_text(PART:"label_2", buf);

                snprintf(buf, sizeof(buf), "configure_state = %d", get_int(configure_state));
                set_text(PART:"label_3", buf);
          }      
      }
            
    images {
       image: "background.jpg" RAW;
       image: "app_window.jpg" RAW;
       image: "audio_icon.png" LOSSY 80;
       image: "video_icon.png" LOSSY 80;
       image: "configure_icon.png" LOSSY 80;
       image: "confirm_exit_window.png" RAW;
       image: "yes_bt.jpg" LOSSY 90;
       image: "no_bt.jpg" LOSSY 90;
       image: "exit_icon.png" LOSSY 80;
    }
    min: 800 600;
    max: 1024 768;
      parts {
         part {
            name: "bg_rect"; //gray retangle that fills the entire window
            type: RECT;
            description {
               state: "default" 0.0;
               color: 255 255 255 55;
               rel1 {
                  relative: 0.0 0.0;
                  offset: 0 0;
               }
               rel2 {
                  relative: 1.0 1.0;
                  offset: 0 0;
               }
            }
         }

         part {
            name: "background_img" ;
            type: IMAGE;
            mouse_events: 0;
            description {
                state: "default" 0.0;
                rel1 {
                   relative: 0.0 0.0; 
                   offset: 10 10;
                }
                rel2 {
                   relative: 1.0 1.0;
                   offset: -10 -10;
                }
                image {
                  normal: "background.jpg";
                }
            }
         }

         part {
            name: "notification_bar"; // the bar in the top of window, not used yet
            type: RECT;
            mouse_events: 1;
            description {
               state: "default" 0.0;
               color: 125 0 125 255;
               rel1 {
                  relative: 0.0 0.0 ; to: "background_img";
                  offset: 2 2;
               }
               rel2 {
                  relative: 1.0 0.1; to: "background_img";
                  offset: -2 -10;
               }
            }
         }

         part {
            name: "app_window"; // the center window that will display the
                                // applications buttons
            type: IMAGE;
            repeat_events: 1;
            mouse_events: 1;
            description {
               state: "default" 0.0;
               image.normal: "app_window.jpg";                                
               rel1 {
                  relative: 0.1 0.1 ; to: "background_img";
                  offset: 0 15;
               }
               rel2 {
                  relative: 0.9 0.8; to: "background_img";
                  offset: 0 -20;
               }
            }
            description {
               state: "audio_bt_clicked" 0.0;
               inherit: "default" 0.0;
               color: 255 0 0 255;
            }
            description {
               state: "video_bt_clicked" 0.0;
               inherit: "default" 0.0;
               color: 0 255 0 255;
            }
            description {
               state: "configure_bt_clicked" 0.0;
               inherit: "default" 0.0;
               color: 0 0 255 255;
            }
         }

///////////////// used to show states  ///////////////////
         part {
                name: "button_box";
                type: RECT;
                description {
                    state: "default" 0.0;
                    color: 200 200 200 255;
                    rel1 {
                        to: "app_window";
                        relative: 0.2 0.2;
                    }
                    rel2 {
                        to: "app_window";
                        relative: 0.6 0.6;
                    }                    
                }
            }

            part {
                name: "label";
                type: TEXT;
                mouse_events: 0;
                description {
                    state: "default" 0.0;
                    color: 0 0 0 255;
                    text {
                        text: "label";
                        font: "Sans";
                        size: 14;
                        align: 0.5 0.5;
                    }
                    rel1 {
                        to: "button_box";
                        relative: 0.0 0.1;
                    }
                    rel2 {
                        to: "button_box";
                        relative: 1.0 1.0;
                    }
                }
            }

            part {
                name: "label_2";
                type: TEXT;
                mouse_events: 0;
                description {
                    state: "default" 0.0;
                    color: 0 0 0 255;
                    text {
                        text: "label_2";
                        font: "Sans";
                        size: 14;
                        align: 0.5 0.3;
                    }
                    rel1 {
                        to: "button_box";
                        relative: 0.0 0.5;
                    }
                    rel2 {
                        to: "button_box";
                        relative: 1.0 1.0;
                    }
                }
            }

            part {
                name: "label_3";
                type: TEXT;
                mouse_events: 0;
                description {
                    state: "default" 0.0;
                    color: 0 0 0 255;
                    text {
                        text: "label_3";
                        font: "Sans";
                        size: 14;
                        align: 0.5 0.5;
                    }
                    rel1 {
                        to: "button_box";
                        relative: 0.0 0.6;
                    }
                    rel2 {
                        to: "button_box";
                        relative: 1.0 1.0;
                    }
                }
            }

//////////////// end of show states //////////////
         
         part {
            name: "audio_bt";
            type: IMAGE;
            mouse_events: 1;
            description {
               state: "default" 0.0;
               image {
                  normal: "audio_icon.png";
               }
               color: 0 255 0 255;
               rel1 {
                  relative: 0.1 0.8 ; to: "background_img";
               }
               rel2 {
                  relative: 0.3 0.9; to: "background_img";
               }
            }
            description {
               state: "audio_bt_mouse_in" 0.0;
               inherit: "default" 0.0;
               color: 200 200 0 255;
            }
         }
         
         part {
            name: "video_bt";
            type: IMAGE;
            mouse_events: 1;
            description {
               state: "default" 0.0;
               image {
                  normal: "video_icon.png";
               }
               color: 0 255 0 255;
               rel1 {
                  relative: 0.4 0.8 ; to: "background_img";
               }
               rel2 {
                  relative: 0.6 0.9; to: "background_img";
               }
         }
         description {
               state: "video_bt_mouse_in" 0.0;
               inherit: "default" 0.0;
               color: 200 200 0 255;
            }
        }
         
         part {
            name: "configure_bt";
            type: IMAGE;
            mouse_events: 1;
            description {
                state: "default" 0.0;
                image {
                   normal: "configure_icon.png";
                }
                color: 0 255 0 255;
                rel1 {
                  relative: 0.7 0.8 ; to: "background_img";
                }
                rel2 {
                  relative: 0.9 0.9; to: "background_img";
                }
            }
            description {
               state: "configure_bt_mouse_in" 0.0;
               inherit: "default" 0.0;
               color: 200 200 0 255;
         }

         part {
            name: "exit_bt";
            type: IMAGE;
            mouse_events: 1;
            description {
               state: "default" 0.0;
               image.normal: "exit_icon.png";
               color: 0 255 0 255;
               rel1 {
                  relative: 0.0 0.9 ; to: "background_img";
                  offset: 5 5;
               }
               rel2 {
                  relative: 0.1 1.0; to: "background_img";
                  offset: -12 -5;
               }
            }
            description {
               state: "exit_bt_mouse_in" 0.0;
               inherit: "default" 0.0;
               color: 200 0 0 255;
         }

         part { //used to confirm if you want to exit or not

            name: "confirm_exit_window";
            type: IMAGE;
            mouse_events: 0;
            description {
               state: "default" 0.0;
               visible: 0;
               image.normal: "confirm_exit_window.png";
               rel1 {
                  relative: 0.1 0.1 ; to: "background_img";
                  offset: 0 15;
               }
               rel2 {
                  relative: 0.9 0.8; to: "background_img";
                  offset: 0 -20;
               }
            }
            description {
               state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }

         part { // yes_bt is part of the confirm_exit_window
            name: "yes_bt";
            type: IMAGE;
            mouse_events: 1;
            description {
               state: "default" 0.0;
               visible: 0;
               image.normal: "yes_bt.jpg";
               rel1 {
                  relative: 0.2 0.6; to: "confirm_exit_window";
               }
               rel2 {
                  relative: 0.4 0.8; to: "confirm_exit_window";
               }
            }
            description {
               state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }

         part { // no_bt is part of the confirm_exit_window
            name: "no_bt";
            type: IMAGE;
            mouse_events: 1;
            description {
               state: "default" 0.0;
               visible: 0;
               image.normal: "no_bt.jpg";
               rel1 {
                  relative: 0.6 0.6; to: "confirm_exit_window";
               }
               rel2 {
                  relative: 0.8 0.8; to: "confirm_exit_window";
               }
            }
            description {
               state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }         
     } /*end parts */

     programs {

      program { // fills the global vars(audio_state,video_state,configure_state)
                // and starts audio_state as 'show' by default
        name: state_fill;
        signal: "load";
        source: "";
        script {
          set_int(audio_state, 1);
          set_int(video_state, 0);
          set_int(configure_state, 0);          

          set_state(PART:"audio_bt", "audio_bt_mouse_in", 0.0);
          set_state(PART:"video_bt", "default", 0.0);
          set_state(PART:"configure_bt", "default", 0.0);
          set_state(PART:"exit_bt", "default", 0.0);

          print_states();
        }      
      }     

      /********* _key_down_ *********/
      program {
           signal: "main.show.next";
           source: "*";
           script {

                if (get_int(audio_state) == 1)
                {
                  set_int(audio_state, 0);
                  set_int(video_state, 1);
                  set_int(configure_state, 0);

                  set_state(PART:"audio_bt", "default", 0.0);
                  set_state(PART:"video_bt", "video_bt_mouse_in", 0.0);
                  set_state(PART:"configure_bt", "default", 0.0);
                  set_state(PART:"exit_bt", "default", 0.0);
                }

                else if (get_int(video_state) == 1)
                {
                  set_int(audio_state, 0);
                  set_int(video_state, 0);
                  set_int(configure_state, 1);

                  set_state(PART:"audio_bt", "default", 0.0);
                  set_state(PART:"video_bt", "default", 0.0);
                  set_state(PART:"configure_bt", "configure_bt_mouse_in", 0.0);
                  set_state(PART:"exit_bt", "default", 0.0);
                }

                else if (get_int(configure_state) == 1)
                {
                  set_int(audio_state, 1);
                  set_int(video_state, 0);
                  set_int(configure_state, 0);

                  set_state(PART:"audio_bt", "audio_bt_mouse_in", 0.0);
                  set_state(PART:"video_bt", "default", 0.0);
                  set_state(PART:"configure_bt", "default", 0.0);
                  set_state(PART:"exit_bt", "default", 0.0);
                }

                else { // if exit_bt state == in and Right is pressed,
                       // by default exit_bt == out and audio_state == in 
                  set_int(audio_state, 1);
                  set_int(video_state, 0);
                  set_int(configure_state, 0);

                  set_state(PART:"audio_bt", "audio_bt_mouse_in", 0.0);
                  set_state(PART:"video_bt", "default", 0.0);
                  set_state(PART:"configure_bt", "default", 0.0);
                  set_state(PART:"exit_bt", "default", 0.0);
                }                
                print_states();
           }
      }

      program {
           signal: "main.show.prev";
           source: "*";
           script {
                                
                if (get_int(audio_state) == 1)
                {
                  set_int(audio_state, 0);
                  set_int(video_state, 0);
                  set_int(configure_state, 1);

                  set_state(PART:"audio_bt", "default", 0.0);
                  set_state(PART:"video_bt", "default", 0.0);
                  set_state(PART:"configure_bt", "configure_bt_mouse_in", 0.0);
                  set_state(PART:"exit_bt", "default", 0.0); 
                }

                else if (get_int(video_state) == 1)
                {
                  set_int(audio_state, 1);
                  set_int(video_state, 0);
                  set_int(configure_state, 0);

                  set_state(PART:"audio_bt", "audio_bt_mouse_in", 0.0);
                  set_state(PART:"video_bt", "default", 0.0);
                  set_state(PART:"configure_bt", "default", 0.0);
                  set_state(PART:"exit_bt", "default", 0.0);
                }

                else if (get_int(configure_state) == 1)
                {
                  set_int(audio_state, 0);
                  set_int(video_state, 1);
                  set_int(configure_state, 0);

                  set_state(PART:"audio_bt", "default", 0.0);
                  set_state(PART:"video_bt", "video_bt_mouse_in", 0.0);
                  set_state(PART:"configure_bt", "default", 0.0);
                  set_state(PART:"exit_bt", "default", 0.0);
                }

                else { // if exit_bt state == in and Right is pressed,
                       // by default exit_bt == out and configure_state == in 
                  set_int(audio_state, 0);
                  set_int(video_state, 0);
                  set_int(configure_state, 1);

                  set_state(PART:"audio_bt", "default", 0.0);
                  set_state(PART:"video_bt", "default", 0.0);
                  set_state(PART:"configure_bt", "configure_bt_mouse_in", 0.0);
                  set_state(PART:"exit_bt", "default", 0.0);
                }
                print_states();
           }
      }

      program {
        signal: "main.show.enter";
        source: "*";
        script {
           new buf[32]; 
                
           if (get_int(audio_state) == 1)
            {
              snprintf(buf, sizeof(buf), "show audio_state" );
              set_text(PART:"label", buf);
           }
           else if (get_int(video_state) == 1)
            {
              snprintf(buf, sizeof(buf), "show video_state" );
              set_text(PART:"label_2", buf);
           }
           else if (get_int(configure_state) == 1)
            {
              snprintf(buf, sizeof(buf), "show configure_state" );
              set_text(PART:"label_3", buf);
           }
        }
      }
      /********* end _keyboard_down_ *********/

        
        /******** audio_bt ********/
        program { 
           name: "audio_bt_mouse_in";
           signal: "mouse,in";
           source: "audio_bt";
           action: SIGNAL_EMIT "main.show.audio" "audio_bt";
        }

        program { 
           name: "main_show_audio";
           signal: "main.show.audio";
           source: "*";
           script {
              set_int(audio_state, 1);
              set_int(video_state, 0);
              set_int(configure_state, 0);

              set_state(PART:"audio_bt", "audio_bt_mouse_in", 0.0);
              set_state(PART:"video_bt", "default", 0.0);
              set_state(PART:"configure_bt", "default", 0.0);
              set_state(PART:"exit_bt", "default", 0.0);

              print_states();
            }
        }

        program { 
           name: "audio_bt_mouse_clicked";
           signal: "mouse,clicked,*";
           source: "audio_bt";
           action: SIGNAL_EMIT "main.selected.audio" "audio_bt";        
        }

         program {
           name: "main_selected_audio";
           signal: "main.selected.audio";
           source: "*";
           action: STATE_SET "audio_bt_clicked" 0.0;
           target: "app_window";
           transition: LINEAR 0.1;          
        }

        program { //just used for example, you can delete without problems
           signal: "main.selected.audio";
           source: "*";
           action: STATE_SET "audio_bt_clicked" 0.0;
           target: "app_window";
           transition: LINEAR 0.1;          
        }/******** end audio_bt ********/


        /******** video_bt ********/
        program { 
           name: "video_bt_mouse_in";
           signal: "mouse,in";
           source: "video_bt";
           action: SIGNAL_EMIT "main.show.video" "video_bt";
        }

        program { 
           name: "main_show_video";
           signal: "main.show.video"; 
           source: "*";
           script {
              set_int(audio_state, 0);
              set_int(video_state, 1);
              set_int(configure_state, 0);

              set_state(PART:"audio_bt", "default", 0.0);
              set_state(PART:"video_bt", "video_bt_mouse_in", 0.0);
              set_state(PART:"configure_bt", "default", 0.0);
              set_state(PART:"exit_bt", "default", 0.0);

              print_states();
            }
        }
        
        program { 
           name: "video_bt_mouse_clicked";
           signal: "mouse,clicked,*";
           source: "video_bt";
           action: SIGNAL_EMIT "main.selected.video" "video_bt";        
        }

        program { //just used for example, you can delete without problems
           signal: "main.selected.video";
           source: "*";
           action: STATE_SET "video_bt_clicked" 0.0;
           target: "app_window";
           transition: LINEAR 0.1;
           
        }/******** end video_bt ********/

        
        /******** configure_bt ********/
        program { 
           name: "configure_bt_bt_mouse_in";
           signal: "mouse,in";
           source: "configure_bt";
           action: SIGNAL_EMIT "main.show.configure" "configure_bt";
        }

        program { 
           name: "main_show_configure";
           signal: "main.show.configure";
           source: "*";
           script {
              set_int(audio_state, 0);
              set_int(video_state, 0);
              set_int(configure_state, 1);

              set_state(PART:"audio_bt", "default", 0.0);
              set_state(PART:"video_bt", "default", 0.0);
              set_state(PART:"configure_bt", "configure_bt_mouse_in", 0.0);
              set_state(PART:"exit_bt", "default", 0.0);

              print_states();
            }
        }

        program { 
           name: "configure_bt_mouse_clicked";
           signal: "mouse,clicked,*";
           source: "configure_bt";
           action: SIGNAL_EMIT "main.selected.configure" "configure_bt";        
        }

        program { //just used for example, you can delete without problems
           signal: "main.selected.configure";
           source: "*";
           action: STATE_SET "configure_bt_clicked" 0.0;
           target: "app_window";
           transition: LINEAR 0.1;
           
        }/******** end configure_bt ********/

        
        }/******** exit_bt ********/
        program { 
           name: "exit_bt_mouse_in";
           signal: "mouse,in";
           source: "exit_bt";
           action: SIGNAL_EMIT "main.show.exit" "exit_bt";
        }

        program { 
           name: "main_show_exit";
           signal: "main.show.exit";
           source: "*";

           script { // if exit_bt state == in, all other states
                    // will set to default (not mouse_in)
              set_int(audio_state, 0);
              set_int(video_state, 0);
              set_int(configure_state, 0);

              set_state(PART:"audio_bt", "default", 0.0);
              set_state(PART:"video_bt", "default", 0.0);
              set_state(PART:"configure_bt", "default", 0.0);
              set_state(PART:"exit_bt", "exit_bt_mouse_in", 0.0);

              print_states();
            }
        }

        program { 
           name: "exit_bt_mouse_clicked";
           signal: "mouse,clicked,*";
           source: "exit_bt";
           action: SIGNAL_EMIT "main.selected.exit" "exit_bt";
        }

        program { // this program active the visibility of confirm exit window
           
           name: "main_selected_exit";
           signal: "main.selected.exit";
           source: "exit_bt";
           script{
              set_state(PART:"app_window", "default", 0.0);
              set_state(PART:"audio_bt", "default", 0.0);
              set_state(PART:"video_bt", "default", 0.0);
              set_state(PART:"configure_bt", "default", 0.0);
              set_state(PART:"confirm_exit_window", "visible", 0.0);
              set_state(PART:"yes_bt", "visible", 0.0);
              set_state(PART:"no_bt", "visible", 0.0);              
           }
        }
 
        program { // this program active the visibility of 
                  // confirm window exit if Escape(Esc) is pressed
           name: "escape_down";
           signal: "escape";
           source: "*";
           script{
              set_state(PART:"app_window", "default", 0.0);
              set_state(PART:"audio_bt", "default", 0.0);
              set_state(PART:"video_bt", "default", 0.0);
              set_state(PART:"exit_bt", "exit_bt_mouse_in", 0.0);
              set_state(PART:"configure_bt", "default", 0.0);
              set_state(PART:"confirm_exit_window", "visible", 0.0);
              set_state(PART:"yes_bt", "visible", 0.0);
              set_state(PART:"no_bt", "visible", 0.0);              
           }
        }

        program { // this program just works if the confirm exit window is visible
           name: "yes_bt_clicked";
           signal: "mouse,clicked,*";
           source: "yes_bt";
           action: SIGNAL_EMIT "yes_bt,clicked" "yes_bt";
        }

        program { // this program just works if the confirm exit window is visible
           name: "no_bt_clicked";
           signal: "mouse,clicked,*";
           source: "no_bt";
           script{
              set_state(PART:"app_window", "default", 0.0);
              set_state(PART:"audio_bt", "audio_bt_mouse_in", 0.0);
              set_state(PART:"video_bt", "default", 0.0);
              set_state(PART:"exit_bt", "default", 0.0);
              set_state(PART:"configure_bt", "default", 0.0);
              set_state(PART:"confirm_exit_window", "default", 0.0);
              set_state(PART:"yes_bt", "default", 0.0);
              set_state(PART:"no_bt", "default", 0.0);              
           }   
        
        }/******** end exit_bt ********/
     } /* end programs */
 } /*end group "main" */
} /* end collections */ 